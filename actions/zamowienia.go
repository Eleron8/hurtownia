package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/gobuffalo/x/responder"
  "github.com/hurtownia/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Zamowienium)
// DB Table: Plural (zamowienia)
// Resource: Plural (Zamowienia)
// Path: Plural (/zamowienia)
// View Template Folder: Plural (/templates/zamowienia/)

// ZamowieniaResource is the resource for the Zamowienium model
type ZamowieniaResource struct{
  buffalo.Resource
}

// List gets all Zamowienia. This function is mapped to the path
// GET /zamowienia
func (v ZamowieniaResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  zamowienia := &models.Zamowienia{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Zamowienia from the DB
  if err := q.All(zamowienia); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    c.Set("zamowienia", zamowienia)
    return c.Render(http.StatusOK, r.HTML("/zamowienia/index.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(zamowienia))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(zamowienia))
  }).Respond(c)
}

// Show gets the data for one Zamowienium. This function is mapped to
// the path GET /zamowienia/{zamowienium_id}
func (v ZamowieniaResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Zamowienium
  zamowienium := &models.Zamowienium{}

  // To find the Zamowienium the parameter zamowienium_id is used.
  if err := tx.Find(zamowienium, c.Param("zamowienium_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    c.Set("zamowienium", zamowienium)

    return c.Render(http.StatusOK, r.HTML("/zamowienia/show.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(zamowienium))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(zamowienium))
  }).Respond(c)
}

// New renders the form for creating a new Zamowienium.
// This function is mapped to the path GET /zamowienia/new
func (v ZamowieniaResource) New(c buffalo.Context) error {
  c.Set("zamowienium", &models.Zamowienium{})

  return c.Render(http.StatusOK, r.HTML("/zamowienia/new.plush.html"))
}
// Create adds a Zamowienium to the DB. This function is mapped to the
// path POST /zamowienia
func (v ZamowieniaResource) Create(c buffalo.Context) error {
  // Allocate an empty Zamowienium
  zamowienium := &models.Zamowienium{}

  // Bind zamowienium to the html form elements
  if err := c.Bind(zamowienium); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(zamowienium)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the new.html template that the user can
      // correct the input.
      c.Set("zamowienium", zamowienium)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/zamowienia/new.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "zamowienium.created.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/zamowienia/%v", zamowienium.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.JSON(zamowienium))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.XML(zamowienium))
  }).Respond(c)
}

// Edit renders a edit form for a Zamowienium. This function is
// mapped to the path GET /zamowienia/{zamowienium_id}/edit
func (v ZamowieniaResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Zamowienium
  zamowienium := &models.Zamowienium{}

  if err := tx.Find(zamowienium, c.Param("zamowienium_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  c.Set("zamowienium", zamowienium)
  return c.Render(http.StatusOK, r.HTML("/zamowienia/edit.plush.html"))
}
// Update changes a Zamowienium in the DB. This function is mapped to
// the path PUT /zamowienia/{zamowienium_id}
func (v ZamowieniaResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Zamowienium
  zamowienium := &models.Zamowienium{}

  if err := tx.Find(zamowienium, c.Param("zamowienium_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind Zamowienium to the html form elements
  if err := c.Bind(zamowienium); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(zamowienium)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the edit.html template that the user can
      // correct the input.
      c.Set("zamowienium", zamowienium)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/zamowienia/edit.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "zamowienium.updated.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/zamowienia/%v", zamowienium.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(zamowienium))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(zamowienium))
  }).Respond(c)
}

// Destroy deletes a Zamowienium from the DB. This function is mapped
// to the path DELETE /zamowienia/{zamowienium_id}
func (v ZamowieniaResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Zamowienium
  zamowienium := &models.Zamowienium{}

  // To find the Zamowienium the parameter zamowienium_id is used.
  if err := tx.Find(zamowienium, c.Param("zamowienium_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy(zamowienium); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a flash message
    c.Flash().Add("success", T.Translate(c, "zamowienium.destroyed.success"))

    // Redirect to the index page
    return c.Redirect(http.StatusSeeOther, "/zamowienia")
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(zamowienium))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(zamowienium))
  }).Respond(c)
}
