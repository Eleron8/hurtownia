package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/gobuffalo/x/responder"
  "github.com/hurtownia/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Dostawcy)
// DB Table: Plural (dostawcies)
// Resource: Plural (Dostawcies)
// Path: Plural (/dostawcies)
// View Template Folder: Plural (/templates/dostawcies/)

// DostawciesResource is the resource for the Dostawcy model
type DostawciesResource struct{
  buffalo.Resource
}

// List gets all Dostawcies. This function is mapped to the path
// GET /dostawcies
func (v DostawciesResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  dostawcies := &models.Dostawcies{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Dostawcies from the DB
  if err := q.All(dostawcies); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    c.Set("dostawcies", dostawcies)
    return c.Render(http.StatusOK, r.HTML("/dostawcies/index.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(dostawcies))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(dostawcies))
  }).Respond(c)
}

// Show gets the data for one Dostawcy. This function is mapped to
// the path GET /dostawcies/{dostawcy_id}
func (v DostawciesResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Dostawcy
  dostawcy := &models.Dostawcy{}

  // To find the Dostawcy the parameter dostawcy_id is used.
  if err := tx.Find(dostawcy, c.Param("dostawcy_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    c.Set("dostawcy", dostawcy)

    return c.Render(http.StatusOK, r.HTML("/dostawcies/show.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(dostawcy))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(dostawcy))
  }).Respond(c)
}

// New renders the form for creating a new Dostawcy.
// This function is mapped to the path GET /dostawcies/new
func (v DostawciesResource) New(c buffalo.Context) error {
  c.Set("dostawcy", &models.Dostawcy{})

  return c.Render(http.StatusOK, r.HTML("/dostawcies/new.plush.html"))
}
// Create adds a Dostawcy to the DB. This function is mapped to the
// path POST /dostawcies
func (v DostawciesResource) Create(c buffalo.Context) error {
  // Allocate an empty Dostawcy
  dostawcy := &models.Dostawcy{}

  // Bind dostawcy to the html form elements
  if err := c.Bind(dostawcy); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(dostawcy)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the new.html template that the user can
      // correct the input.
      c.Set("dostawcy", dostawcy)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/dostawcies/new.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "dostawcy.created.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/dostawcies/%v", dostawcy.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.JSON(dostawcy))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.XML(dostawcy))
  }).Respond(c)
}

// Edit renders a edit form for a Dostawcy. This function is
// mapped to the path GET /dostawcies/{dostawcy_id}/edit
func (v DostawciesResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Dostawcy
  dostawcy := &models.Dostawcy{}

  if err := tx.Find(dostawcy, c.Param("dostawcy_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  c.Set("dostawcy", dostawcy)
  return c.Render(http.StatusOK, r.HTML("/dostawcies/edit.plush.html"))
}
// Update changes a Dostawcy in the DB. This function is mapped to
// the path PUT /dostawcies/{dostawcy_id}
func (v DostawciesResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Dostawcy
  dostawcy := &models.Dostawcy{}

  if err := tx.Find(dostawcy, c.Param("dostawcy_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind Dostawcy to the html form elements
  if err := c.Bind(dostawcy); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(dostawcy)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the edit.html template that the user can
      // correct the input.
      c.Set("dostawcy", dostawcy)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/dostawcies/edit.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "dostawcy.updated.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/dostawcies/%v", dostawcy.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(dostawcy))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(dostawcy))
  }).Respond(c)
}

// Destroy deletes a Dostawcy from the DB. This function is mapped
// to the path DELETE /dostawcies/{dostawcy_id}
func (v DostawciesResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Dostawcy
  dostawcy := &models.Dostawcy{}

  // To find the Dostawcy the parameter dostawcy_id is used.
  if err := tx.Find(dostawcy, c.Param("dostawcy_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy(dostawcy); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a flash message
    c.Flash().Add("success", T.Translate(c, "dostawcy.destroyed.success"))

    // Redirect to the index page
    return c.Redirect(http.StatusSeeOther, "/dostawcies")
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(dostawcy))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(dostawcy))
  }).Respond(c)
}
